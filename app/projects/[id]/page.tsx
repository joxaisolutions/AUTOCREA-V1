"use client";

import { useState } from "react";
import Link from "next/link";
import {
  Code,
  ArrowLeft,
  Play,
  Rocket,
  Settings,
  Download,
  Github,
  RefreshCw,
  ExternalLink,
  Monitor,
  Eye,
  ChevronDown,
  ChevronUp,
  FilePlus,
  FolderPlus,
  FileCode,
  Folder,
  FolderOpen,
  File,
  X,
  ChevronRight,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";

type FileNode = {
  name: string;
  path: string;
  type: "file" | "folder";
  content?: string;
  children?: FileNode[];
};

const mockFiles: FileNode[] = [
  {
    name: "index.html",
    path: "/index.html",
    type: "file",
    content: `<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Café Aroma</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-amber-50">
  <h1 class="text-4xl font-bold text-center py-20">
    ☕ Café Aroma - El mejor café de la ciudad
  </h1>
</body>
</html>`,
  },
  {
    name: "src",
    path: "/src",
    type: "folder",
    children: [
      {
        name: "App.jsx",
        path: "/src/App.jsx",
        type: "file",
        content: `export default function App() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 to-orange-100">
      <h1>Generated by JoxCoder</h1>
    </div>
  );
}`,
      },
    ],
  },
];

export default function IDEPage({ params }: { params: { id: string } }) {
  const [activeFile, setActiveFile] = useState<string | null>("/index.html");
  const [openTabs, setOpenTabs] = useState<string[]>(["/index.html"]);
  const [terminalVisible, setTerminalVisible] = useState(true);
  const [isRunning, setIsRunning] = useState(false);
  const [files] = useState<FileNode[]>(mockFiles);
  const [expandedFolders, setExpandedFolders] = useState<Set<string>>(new Set([]));

  const projectName = "Café Aroma Landing";

  const handleRun = () => {
    setIsRunning(true);
    toast.success("Ejecutando proyecto...");
    setTimeout(() => {
      setIsRunning(false);
      toast.success("Proyecto ejecutado");
    }, 2000);
  };

  const handleDeploy = () => {
    toast.success("Desplegando en Netlify...");
  };

  const handleFileClick = (path: string) => {
    setActiveFile(path);
    if (!openTabs.includes(path)) {
      setOpenTabs([...openTabs, path]);
    }
  };

  const handleCloseTab = (path: string) => {
    const newTabs = openTabs.filter((t) => t !== path);
    setOpenTabs(newTabs);
    if (activeFile === path) {
      setActiveFile(newTabs[newTabs.length - 1] || null);
    }
  };

  const toggleFolder = (path: string) => {
    setExpandedFolders((prev) => {
      const next = new Set(prev);
      if (next.has(path)) {
        next.delete(path);
      } else {
        next.add(path);
      }
      return next;
    });
  };

  const getActiveFileContent = () => {
    const findFile = (nodes: FileNode[]): string | undefined => {
      for (const node of nodes) {
        if (node.path === activeFile && node.type === "file") {
          return node.content;
        }
        if (node.children) {
          const found = findFile(node.children);
          if (found) return found;
        }
      }
      return undefined;
    };
    return findFile(files) || "";
  };

  return (
    <div className="h-screen flex flex-col bg-primary">
      {/* Top Bar */}
      <header className="h-12 flex items-center justify-between px-4 bg-primary-dark border-b border-primary/20">
        <div className="flex items-center gap-4">
          <Link href="/dashboard" className="flex items-center gap-2 hover:opacity-80">
            <ArrowLeft className="w-4 h-4" />
            <div className="flex items-center gap-2">
              <Code className="w-5 h-5 text-accent" />
              <span className="font-semibold">{projectName}</span>
            </div>
          </Link>

          <div className="flex items-center gap-2 text-sm text-secondary">
            <span>{openTabs.length} archivos abiertos</span>
          </div>
        </div>

        <div className="flex items-center gap-3">
          {/* Status Indicator */}
          <div className="flex items-center gap-2">
            <div className={`w-2 h-2 rounded-full ${isRunning ? "bg-green-500 animate-pulse" : "bg-gray-500"}`} />
            <span className="text-sm text-secondary">{isRunning ? "Running" : "Stopped"}</span>
          </div>

          {/* Run Button */}
          <Button size="sm" className="bg-green-600 hover:bg-green-700" onClick={handleRun} disabled={isRunning}>
            <Play className="w-4 h-4 mr-2" />
            Run
          </Button>

          {/* Deploy Button */}
          <Button size="sm" onClick={handleDeploy}>
            <Rocket className="w-4 h-4 mr-2" />
            Deploy
          </Button>

          <Button variant="ghost" size="sm">
            <Settings className="w-4 h-4" />
          </Button>

          <div className="w-8 h-8 rounded-full bg-gradient-to-br from-accent to-highlight flex items-center justify-center">
            <span className="text-sm font-bold">U</span>
          </div>
        </div>
      </header>

      {/* Main IDE Area */}
      <div className="flex-1 flex overflow-hidden">
        {/* Sidebar: File Tree */}
        <div className="w-64 bg-primary-dark border-r border-primary/20 flex flex-col">
          <div className="p-3 border-b border-primary/20 flex items-center justify-between">
            <span className="text-sm font-semibold text-secondary">FILES</span>
            <div className="flex gap-1">
              <Button variant="ghost" size="sm" onClick={() => toast.info("Nueva archivo")}>
                <FilePlus className="w-4 h-4" />
              </Button>
              <Button variant="ghost" size="sm" onClick={() => toast.info("Nueva carpeta")}>
                <FolderPlus className="w-4 h-4" />
              </Button>
            </div>
          </div>

          <div className="flex-1 overflow-y-auto p-2">
            <FileTree
              files={files}
              activeFile={activeFile}
              expandedFolders={expandedFolders}
              onFileClick={handleFileClick}
              onFolderToggle={toggleFolder}
            />
          </div>
        </div>

        {/* Center: Editor + Terminal */}
        <div className="flex-1 flex flex-col">
          {/* Tabs */}
          <div className="h-10 flex items-center gap-1 px-2 bg-primary border-b border-primary/20 overflow-x-auto">
            {openTabs.map((filePath) => (
              <div
                key={filePath}
                className={`flex items-center gap-2 px-3 py-1.5 rounded-t-lg cursor-pointer ${
                  activeFile === filePath ? "bg-primary-dark border-t-2 border-accent" : "bg-primary hover:bg-primary-dark/50"
                }`}
                onClick={() => setActiveFile(filePath)}
              >
                <FileCode className="w-4 h-4" />
                <span className="text-sm">{filePath.split("/").pop()}</span>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    handleCloseTab(filePath);
                  }}
                  className="hover:bg-red-500/20 rounded p-0.5"
                >
                  <X className="w-3 h-3" />
                </button>
              </div>
            ))}
          </div>

          {/* Editor */}
          <div className="flex-1 relative overflow-auto">
            {activeFile ? (
              <div className="p-4 font-mono text-sm h-full bg-primary-dark">
                <pre className="text-secondary whitespace-pre-wrap">{getActiveFileContent()}</pre>
              </div>
            ) : (
              <div className="flex items-center justify-center h-full text-secondary">
                <div className="text-center">
                  <FileCode className="w-16 h-16 mx-auto mb-4 opacity-50" />
                  <p>Selecciona un archivo para editar</p>
                </div>
              </div>
            )}
          </div>

          {/* Terminal */}
          {terminalVisible && (
            <div className="h-64 border-t border-primary/20 bg-primary">
              <div className="h-10 flex items-center justify-between px-4 bg-primary-dark border-b border-primary/20">
                <div className="flex gap-4">
                  <button className="text-sm font-semibold text-highlight">Terminal</button>
                  <button className="text-sm text-secondary hover:text-white">Console</button>
                </div>
                <button onClick={() => setTerminalVisible(false)}>
                  <ChevronDown className="w-4 h-4" />
                </button>
              </div>

              <div className="h-[calc(100%-2.5rem)] p-2 font-mono text-sm text-secondary overflow-auto">
                <div>$ npm install</div>
                <div className="text-green-500">✓ Dependencies installed</div>
                <div>$ npm run dev</div>
                <div className="text-green-500">✓ Server running on http://localhost:3000</div>
                <div className="animate-pulse">█</div>
              </div>
            </div>
          )}

          {!terminalVisible && (
            <button
              onClick={() => setTerminalVisible(true)}
              className="h-8 w-full bg-primary-dark border-t border-primary/20 flex items-center justify-center hover:bg-primary-dark/80"
            >
              <ChevronUp className="w-4 h-4" />
            </button>
          )}
        </div>

        {/* Right Panel: Live Preview */}
        <div className="w-[40%] bg-primary-dark border-l border-primary/20 flex flex-col">
          <div className="h-10 flex items-center justify-between px-4 bg-primary border-b border-primary/20">
            <div className="flex items-center gap-2">
              <Monitor className="w-4 h-4 text-highlight" />
              <span className="text-sm font-semibold">Preview</span>
            </div>

            <div className="flex items-center gap-2">
              <button className="p-1.5 hover:bg-accent/10 rounded" onClick={() => toast.success("Recargando preview")}>
                <RefreshCw className="w-4 h-4" />
              </button>

              <button className="p-1.5 hover:bg-accent/10 rounded" onClick={() => toast.info("Abriendo en nueva pestaña")}>
                <ExternalLink className="w-4 h-4" />
              </button>
            </div>
          </div>

          <div className="flex-1 bg-white overflow-auto">
            <div className="p-8 text-center text-gray-800">
              <div className="max-w-2xl mx-auto">
                <h1 className="text-5xl font-bold mb-4">☕ Café Aroma</h1>
                <p className="text-2xl text-amber-800">El mejor café de la ciudad</p>
                <button className="mt-8 px-8 py-3 bg-amber-600 text-white rounded-lg font-semibold hover:bg-amber-700">
                  Ver menú
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function FileTree({
  files,
  activeFile,
  expandedFolders,
  onFileClick,
  onFolderToggle,
}: {
  files: FileNode[];
  activeFile: string | null;
  expandedFolders: Set<string>;
  onFileClick: (path: string) => void;
  onFolderToggle: (path: string) => void;
}) {
  const renderNode = (node: FileNode, depth: number = 0) => {
    const isExpanded = expandedFolders.has(node.path);
    const isActive = activeFile === node.path;

    if (node.type === "folder") {
      return (
        <div key={node.path}>
          <div
            className={`flex items-center gap-2 px-2 py-1.5 cursor-pointer hover:bg-accent/10 rounded ${
              isActive ? "bg-accent/20" : ""
            }`}
            style={{ paddingLeft: `${depth * 12 + 8}px` }}
            onClick={() => onFolderToggle(node.path)}
          >
            {isExpanded ? <ChevronDown className="w-4 h-4" /> : <ChevronRight className="w-4 h-4" />}
            {isExpanded ? <FolderOpen className="w-4 h-4 text-yellow-500" /> : <Folder className="w-4 h-4 text-yellow-500" />}
            <span className="text-sm">{node.name}</span>
          </div>
          {isExpanded && node.children && (
            <div>{node.children.map((child) => renderNode(child, depth + 1))}</div>
          )}
        </div>
      );
    }

    return (
      <div
        key={node.path}
        className={`flex items-center gap-2 px-2 py-1.5 cursor-pointer hover:bg-accent/10 rounded ${
          isActive ? "bg-accent/20 border-l-2 border-accent" : ""
        }`}
        style={{ paddingLeft: `${depth * 12 + 24}px` }}
        onClick={() => onFileClick(node.path)}
      >
        <File className="w-4 h-4 text-gray-400" />
        <span className="text-sm">{node.name}</span>
      </div>
    );
  };

  return <div className="text-white">{files.map((node) => renderNode(node))}</div>;
}
